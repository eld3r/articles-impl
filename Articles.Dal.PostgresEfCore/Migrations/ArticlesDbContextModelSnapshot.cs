// <auto-generated />
using System;
using Articles.Dal.PostgresEfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Articles.Dal.PostgresEfCore.Migrations
{
    [DbContext(typeof(ArticlesDbContext))]
    partial class ArticlesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Articles.Dal.PostgresEfCore.Models.ArticleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<long?>("SectionEntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("section_entity_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_articles");

                    b.HasIndex("SectionEntityId")
                        .HasDatabaseName("ix_articles_section_entity_id");

                    b.ToTable("articles", (string)null);
                });

            modelBuilder.Entity("Articles.Dal.PostgresEfCore.Models.ArticleTagEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ArticleId")
                        .HasColumnType("bigint")
                        .HasColumnName("article_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.HasKey("Id")
                        .HasName("pk_article_tag_entity");

                    b.HasIndex("ArticleId")
                        .HasDatabaseName("ix_article_tag_entity_article_id");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_article_tag_entity_tag_id");

                    b.ToTable("article_tag_entity", (string)null);
                });

            modelBuilder.Entity("Articles.Dal.PostgresEfCore.Models.SectionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_sections");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_sections_name");

                    b.ToTable("sections", (string)null);
                });

            modelBuilder.Entity("Articles.Dal.PostgresEfCore.Models.TagEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_tags_name");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("SectionEntityTagEntity", b =>
                {
                    b.Property<long>("SectionsId")
                        .HasColumnType("bigint")
                        .HasColumnName("sections_id");

                    b.Property<long>("TagsId")
                        .HasColumnType("bigint")
                        .HasColumnName("tags_id");

                    b.HasKey("SectionsId", "TagsId")
                        .HasName("pk_section_entity_tag_entity");

                    b.HasIndex("TagsId")
                        .HasDatabaseName("ix_section_entity_tag_entity_tags_id");

                    b.ToTable("section_entity_tag_entity", (string)null);
                });

            modelBuilder.Entity("Articles.Dal.PostgresEfCore.Models.ArticleEntity", b =>
                {
                    b.HasOne("Articles.Dal.PostgresEfCore.Models.SectionEntity", null)
                        .WithMany("Articles")
                        .HasForeignKey("SectionEntityId")
                        .HasConstraintName("fk_articles_sections_section_entity_id");
                });

            modelBuilder.Entity("Articles.Dal.PostgresEfCore.Models.ArticleTagEntity", b =>
                {
                    b.HasOne("Articles.Dal.PostgresEfCore.Models.ArticleEntity", "Article")
                        .WithMany("TagLinks")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_article_tag_entity_articles_article_id");

                    b.HasOne("Articles.Dal.PostgresEfCore.Models.TagEntity", "Tag")
                        .WithMany("Articles")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_article_tag_entity_tags_tag_id");

                    b.Navigation("Article");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("SectionEntityTagEntity", b =>
                {
                    b.HasOne("Articles.Dal.PostgresEfCore.Models.SectionEntity", null)
                        .WithMany()
                        .HasForeignKey("SectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_section_entity_tag_entity_sections_sections_id");

                    b.HasOne("Articles.Dal.PostgresEfCore.Models.TagEntity", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_section_entity_tag_entity_tags_tags_id");
                });

            modelBuilder.Entity("Articles.Dal.PostgresEfCore.Models.ArticleEntity", b =>
                {
                    b.Navigation("TagLinks");
                });

            modelBuilder.Entity("Articles.Dal.PostgresEfCore.Models.SectionEntity", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Articles.Dal.PostgresEfCore.Models.TagEntity", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
